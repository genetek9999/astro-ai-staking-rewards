// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewStake extends ethereum.Event {
  get params(): NewStake__Params {
    return new NewStake__Params(this);
  }
}

export class NewStake__Params {
  _event: NewStake;

  constructor(event: NewStake) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewStaking extends ethereum.Event {
  get params(): NewStaking__Params {
    return new NewStaking__Params(this);
  }
}

export class NewStaking__Params {
  _event: NewStaking;

  constructor(event: NewStaking) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakinger(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdatedStake extends ethereum.Event {
  get params(): UpdatedStake__Params {
    return new UpdatedStake__Params(this);
  }
}

export class UpdatedStake__Params {
  _event: UpdatedStake;

  constructor(event: UpdatedStake) {
    this._event = event;
  }

  get stakeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AstroAiStakingRewards__stakesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDuration(): BigInt {
    return this.value0;
  }

  getApy(): BigInt {
    return this.value1;
  }
}

export class AstroAiStakingRewards__userStakesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getStakinger(): Address {
    return this.value0;
  }

  getStakeId(): BigInt {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getStart(): BigInt {
    return this.value3;
  }

  getClaimTime(): BigInt {
    return this.value4;
  }

  getClaimed(): boolean {
    return this.value5;
  }
}

export class AstroAiStakingRewards extends ethereum.SmartContract {
  static bind(address: Address): AstroAiStakingRewards {
    return new AstroAiStakingRewards("AstroAiStakingRewards", address);
  }

  WAITING_TIME_CLAIM(): BigInt {
    let result = super.call(
      "WAITING_TIME_CLAIM",
      "WAITING_TIME_CLAIM():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WAITING_TIME_CLAIM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WAITING_TIME_CLAIM",
      "WAITING_TIME_CLAIM():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(param0: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_earned(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingReward(_id: BigInt): BigInt {
    let result = super.call(
      "pendingReward",
      "pendingReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_pendingReward(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingReward",
      "pendingReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakes(param0: BigInt): AstroAiStakingRewards__stakesResult {
    let result = super.call("stakes", "stakes(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new AstroAiStakingRewards__stakesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_stakes(
    param0: BigInt
  ): ethereum.CallResult<AstroAiStakingRewards__stakesResult> {
    let result = super.tryCall("stakes", "stakes(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AstroAiStakingRewards__stakesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  tokenStaking(): Address {
    let result = super.call("tokenStaking", "tokenStaking():(address)", []);

    return result[0].toAddress();
  }

  try_tokenStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenStaking", "tokenStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStake(): BigInt {
    let result = super.call("totalStake", "totalStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStake", "totalStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUserStake(): BigInt {
    let result = super.call("totalUserStake", "totalUserStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUserStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUserStake",
      "totalUserStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakes(param0: BigInt): AstroAiStakingRewards__userStakesResult {
    let result = super.call(
      "userStakes",
      "userStakes(uint256):(address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AstroAiStakingRewards__userStakesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_userStakes(
    param0: BigInt
  ): ethereum.CallResult<AstroAiStakingRewards__userStakesResult> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(uint256):(address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AstroAiStakingRewards__userStakesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStakeCall extends ethereum.Call {
  get inputs(): AddStakeCall__Inputs {
    return new AddStakeCall__Inputs(this);
  }

  get outputs(): AddStakeCall__Outputs {
    return new AddStakeCall__Outputs(this);
  }
}

export class AddStakeCall__Inputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get _duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _apy(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeCall__Outputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenStakingCall extends ethereum.Call {
  get inputs(): SetTokenStakingCall__Inputs {
    return new SetTokenStakingCall__Inputs(this);
  }

  get outputs(): SetTokenStakingCall__Outputs {
    return new SetTokenStakingCall__Outputs(this);
  }
}

export class SetTokenStakingCall__Inputs {
  _call: SetTokenStakingCall;

  constructor(call: SetTokenStakingCall) {
    this._call = call;
  }

  get _tokenStaking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenStakingCall__Outputs {
  _call: SetTokenStakingCall;

  constructor(call: SetTokenStakingCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _stakeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateStakeCall extends ethereum.Call {
  get inputs(): UpdateStakeCall__Inputs {
    return new UpdateStakeCall__Inputs(this);
  }

  get outputs(): UpdateStakeCall__Outputs {
    return new UpdateStakeCall__Outputs(this);
  }
}

export class UpdateStakeCall__Inputs {
  _call: UpdateStakeCall;

  constructor(call: UpdateStakeCall) {
    this._call = call;
  }

  get _duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _apy(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateStakeCall__Outputs {
  _call: UpdateStakeCall;

  constructor(call: UpdateStakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
